# Configuration for Albion Trade Analyzer

api:
  base_url: "https://old.west.albion-online-data.com/api/v2/stats" # Base URL for price/history endpoints

locations:
  royal_cities:
    - Lymhurst
    - Bridgewatch
    - Martlock
    - Thetford
    - Fort Sterling
  artifact_cities:
    - Caerleon
  black_market: "Black Market"
  # Combine all for convenience, analyzer will use this structure
  all_cities:
    - Lymhurst
    - Bridgewatch
    - Martlock
    - Thetford
    - Fort Sterling
    - Caerleon
    - "Black Market" # Needs quotes because of the space

taxes:
  # Estimated base sales tax rates (non-premium). Premium cuts these in half.
  rates:
    royal: 0.03
    caerleon: 0.06
    black_market: 0.04
  # TODO: Add setting for premium status?
  premium_modifier: 0.5 # Multiplier for tax if premium is active

analysis:
  # Default items OR categories to analyze if not overridden by CLI
  # Use EITHER default_items OR default_categories, not both typically
  default_items: [] # Clear this if using categories
  default_categories:
    - Resources
    - Artifacts
    - All Bags
    - Capes
  default_quality: 1
  min_net_profit: 500
  result_limit: 25
  use_premium_tax_rate: false
  # New settings for volume/history:
  fetch_history: true # Set to false to disable history fetching/volume filtering
  history_time_scale: 24 # Time scale for history aggregation (6 = 6hrs, 24 = 1 day) - API supports 1, 6, 24
  min_avg_daily_volume: 50 # Minimum average daily volume (over the history period fetched) to consider a scalp valid

item_categories:
  # Resources: match resource types without tier prefix, with optional tier prefix
  "Resources": { type: "regex", value: "^(?:T\\d+_)?(WOOD|ROCK|FIBER|ORE|HIDE).*$" }
  "Leather": { type: "regex", value: "^(?:T\\d+_)?LEATHER.*$" }
  "Cloth": { type: "regex", value: "^(?:T\\d+_)?CLOTH.*$" }

  # Artifacts: match artifact IDs without tier prefix, with optional tier prefix
  "Artifacts": { type: "regex", value: "^(?:T\\d+_)?ARTEFACT.*$" }

  # Bags & Capes: use name_contains for simplicity
  "All Bags": { type: "name_contains", value: " Bag" }
  "Capes": { type: "name_contains", value: " Cape" }

  # Weapons: remove tier prefix from regex and allow optional tier prefix
  "All Swords": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(SWORD|CLAYMORE|DUALSWORD|SCIMITAR_MORGANA|SCYTHE_HELL|GALATINEPAIR|KINGMAKER).*$" }
  "All Axes": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(AXE|GREATAXE|HALBERD|HALBERD_MORGANA|HANDOFKHOR|BEARPAWS_AVALON|REALMBREAKER).*$" }
  "All Maces": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(MACE|HEAVYMACE|FLAIL|MACE_MORGANA|INCUBUSMACE|CAMLANNMACE|OATHKEEPERS_AVALON).*$" }
  "All Hammers": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(HAMMER|POLEHAMMER|GREAT_HAMMER|HAMMER_UNDEAD|TOMB_HAMMER|FORGEHAMMERS_AVALON|GROVEKEEPER).*$" }
  "All Crossbows": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(CROSSBOW|HEAVYCROSSBOW|CROSSBOW_REPEATING|CROSSBOW_UNDEAD|BOLTCASTERS|ENERGYSHAPER_AVALON|WEEPING_REPEATER).*$" }
  "All Bows": { type: "regex", value: "^(?:T\\d+_)?(2H)_(BOW|WARBOW|LONGBOW|BOW_UNDEAD|BOW_KEEPER|BOW_AVALON|WHISPERINGBOW).*$" }
  "All Spears": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(SPEAR|PIKE|GLAIVE|SPEAR_KEEPER|HERONSPEAR|SPIRITHUNTER_AVALON|TRINITYSPEAR).*$" }
  "All Nature Staffs": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(NATURESTAFF|GREATNATURESTAFF|WILDSTAFF|NATURESTAFF_KEEPER|DRUIDIC_STAFF|BLIGHT_STAFF_AVALON|RAMPANTSTAFF).*$" }
  "All Fire Staffs": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(FIRESTAFF|GREATFIRESTAFF|INFERNOSTAFF|FIRESTAFF_KEEPER|WILDFIRE_STAFF|BRIMSTONE_STAFF_AVALON|BLAZINGSTAFF).*$" }
  "All Frost Staffs": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(FROSTSTAFF|GREATFROSTSTAFF|GLACIALSTAFF|FROSTSTAFF_KEEPER|HOARFROST_STAFF|ICICLE_STAFF_AVALON|PERMAFROSTPRISM).*$" }
  "All Arcane Staffs": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(ARCANESTAFF|GREATARCANESTAFF|ENIGMATICSTAFF|ARCANESTAFF_UNDEAD|WITCHWORK_STAFF|OCCULT_STAFF_AVALON|EVENINGSONG).*$" }
  "All Cursed Staffs": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(CURSEDSTAFF|GREATCURSEDSTAFF|DEMONICSTAFF|CURSEDSTAFF_UNDEAD|SKULL_HELL|DAMNATION_STAFF_AVALON|SHADOWCALLER).*$" }
  "All Daggers": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_(DAGGER|DAGGERPAIR|CLAWS|RAPIER_MORGANA|BLOODLETTER_HELL|DEMONFANG_AVALON|DEATHGIVERS).*$" }
  "All Quarterstaffs": { type: "regex", value: "^(?:T\\d+_)?(2H)_(QUARTERSTAFF|IRONCLADEDSTAFF|DOUBLEBLADEDSTAFF|STAFF_UNDEAD|BLACKMONK_STAFF|STAFF_AVALON|GRAILSEEKER).*$" }
  "All Shapeshifter Staffs": { type: "regex", value: "^(?:T\\d+_)?(MAIN|2H)_SHAPESHIFTER_(STAFF|HELL|AVALON|KEEPER|MORGANA|UNDEAD).*$" }
  "All Offhands": { type: "regex", value: "^(?:T\\d+_)?(OFF)_(TORCH|SHIELD|BOOK|HORN_KEEPER|DEMONSKULL_HELL|EYE_AVALON|MISTCALLER_AVALON|TAPROOT_KEEPER|CRYPTSKULL_UNDEAD).*$" }

  # Mounts: generic matching, allow optional tier prefix and any characters after
  "Mounts": { type: "regex", value: "^(?:T\\d+_)?MOUNT.*$" }

cache:
  # ... (cache settings - TTL might be longer for history?) ...
  enabled: true
  directory: "cache/api_responses"
  ttl_seconds: 900 # Keep TTL same for now, maybe increase later for history if needed

logging:
  level: INFO # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: '%(asctime)s - %(levelname)s - [%(module)s:%(lineno)d] - %(message)s' 